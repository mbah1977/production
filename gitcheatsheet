git remote add production git@github.com:mbah1977/production.git #After cloning a github repo, and creating a new branch locally, you use this command to add the branch to the git repo

git push -u <origin> production  #After you commit your stuff to the new branch, you use this command to push to the remote repo . origin branch is the name of the main branch that contains the previous commits.

if you remove the origin branch with git remote remove <branch-name> then alawys use git push <branch> to push to remote atfter.
#The name of the repo is the name you will find on the local system after cloning a repo, not the name of the branch that you create.

git remote -v # this will tell you how many branches you have on the remote repo

git remote remove <branch name> # this will remove the remote branch from the repo

Make sure you inside a repo before you do anything that has been be saved in the repo. In this case you must cd into the production dir here git@github.com:mbah1977/production.git, which is the name of the remote repo you will find as a directory on the cmdline.

git commit --allow-empty -m "initial empty commit". You cannot change or create branches in Git until you have committed at least one change.
Rename the 'master' branch to 'production' with git branch -m master production
Push your changes with git push origin production

    Create a new branch by running git branch <NAME-OF-NEW-BRANCH>
    Check out the new branch by running git checkout <NAME-OF-NEW-BRANCH>
    Edit the Puppetfile as needed for your new environment, and save your changes.
    Commit your changes by running git commit -m "a commit message summarizing your change"
    Push your changes by running git push origin <NAME-OF-NEW-BRANCH>
    Deploy your environments as you normally would.

    If you have set up a Code Manager webhook or script trigger, it deploys the environments automatically when you push your changes. Alternatively, deploy the environments on the command line with Code Manager or r10k commands.

bination of   
git fetch 
 and   
git merge 
Synchronize changes
Synchronize changes
Synchronize your local repository with the remote repository 
on GitHub.com
$ git push
Uploads all local branch commits to GitHub
$ git merge
Combines remote tracking branch into current local branch
$ git fetch
Downloads all history from the remote tracking branches
$ git branch -d [branch-name]
Deletes the specified branch
$ git merge [branch]
Combines the specified branch’s history into the 
current branch. This is usually done in pull requests, 
but is an important Git operation.
$ git checkout [branch-name]
Switches to the specified branch and updates the 
working directory
Branches
Branches are an important part of working with Git. Any 
commits you make will be made on the branch you're currently 
“checked out” to. Use  
git status
 to see which branch that is.
$ git branch [branch-name]
Creates a new branch

ion history
$ git add [file]
Snapshots the file in preparation for versioning
$ git show [commit]
Outputs metadata and content changes of the specified commit

Redo commits
Erase mistakes and craft replacement history
CAUTION! Changing history can have nasty side effects. If you 
need to change commits that exist on GitHub (the remote), 
proceed with caution. If you need help, reach out at 
github.community or contact suppo
